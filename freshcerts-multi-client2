#!/usr/bin/env ruby
# Freshcerts client in Ruby with support for multi-domain certs (SAN)
# https://github.com/myfreeweb/freshcerts
#
# Run this via cron every day for each domain

require 'openssl'
require 'net/http'
require 'uri'
require 'open3'
require 'fileutils'
require 'rubygems/package'
require 'rest-client'

AUTH_TOKEN      = ENV['FRESHCERTS_TOKEN']
FRESHCERTS_HOST = ENV['FRESHCERTS_HOST'] || 'localhost:9292'
KEYS_DIRECTORY  = ENV['KEYS_DIRECTORY']  || '/usr/local/etc/certs'
CREATE_PKCS     = ENV['CREATE_PKCS']
COMPLETE_ERROR  = false

def gen_csr(key, domains)
  csr = OpenSSL::X509::Request.new
  csr.version = 0
  csr.public_key = key.public_key
  csr.subject = OpenSSL::X509::Name.new([
    ['CN', domains.first, OpenSSL::ASN1::UTF8STRING]
  ])
  ef = OpenSSL::X509::ExtensionFactory.new
  extensions = [
    ['subjectAltName', domains.map { |d| "DNS:#{d}" }.join(',')]
  ].map { |e| ef.create_extension(*e) }
  attr_values = OpenSSL::ASN1::Set([OpenSSL::ASN1::Sequence(extensions)])
  csr.add_attribute OpenSSL::X509::Attribute.new('extReq', attr_values)
  csr.add_attribute OpenSSL::X509::Attribute.new('msExtReq', attr_values)
  csr.sign(key, OpenSSL::Digest::SHA256.new)
end

def issue(domains, ports)
  key = OpenSSL::PKey::RSA.new 2048
  keypath = File.join(KEYS_DIRECTORY, "#{domains.join(',')}.key.pem")
  File.write "#{keypath}.new", key.to_s
  csrpath = File.join(KEYS_DIRECTORY, "#{domains.join(',')}.csr")
  File.write "#{csrpath}", gen_csr(key, domains).to_s
  # Use RestClient to do the inquiry.
  begin
    response = RestClient.post "#{FRESHCERTS_HOST}/v1/cert/#{domains.join(',')}/issue", {
      :csr   => File.new(csrpath, 'rb'),
      :ports => ports,
      :token => AUTH_TOKEN,
    }
  rescue RestClient::ExceptionWithResponse => e
    print "\nError response received: #{e.response.code}\n"
    if COMPLETE_ERROR
      print e.response.body, "\n"
    else
      print e.response.body.lines.first, "\n"
      print "freshcerts should send you an email with the complete error\n"
    end
    return
  end
  # Use Rubygems' TarReader to unpack the tarball.
  tardata = StringIO.new
  tardata.write response.body
  tardata.rewind
  Gem::Package::TarReader.new(tardata) do |tar|
    tar.each do |entry|
      if entry.file?
        filepath = File.join(KEYS_DIRECTORY, entry.full_name)
        FileUtils.mkdir_p(File.dirname(filepath))
        File.open(filepath, "wb") do |f|
          f.write(entry.read)
        end
        File.chmod(entry.header.mode, filepath)
      end
    end
  end
  tardata.close
  FileUtils.mv "#{keypath}.new", keypath
end

def build_pkcs(domains)
  unless File.exists? "#{KEYS_DIRECTORY}/#{domains.join(',')}.cert.fullchain.pem"
    print "Unable to build PKCS, cert (pem) not found."
    return
  end
  unless File.exists? "#{KEYS_DIRECTORY}/#{domains.join(',')}.key.pem"
    print "Unable to build PKCS, key (pem) not found."
    return
  end
  rawcert = File.read "#{KEYS_DIRECTORY}/#{domains.join(',')}.cert.fullchain.pem"
  rawkey  = File.read "#{KEYS_DIRECTORY}/#{domains.join(',')}.key.pem"
  cert = OpenSSL::X509::Certificate.new rawcert
  key = OpenSSL::PKey::RSA.new rawkey
  pfx = OpenSSL::PKCS12.create('', "#{domains.join(',')}", key, cert)
  File.open("#{KEYS_DIRECTORY}/#{domains.join(',')}.pfx", 'wb') do |io|
    io.write pfx.to_der
  end
end

domains = ARGV.shift.split(',')
ports = ARGV.shift
resp = Net::HTTP.get_response(URI("#{FRESHCERTS_HOST}/v1/cert/#{domains.join(',')}/should_reissue"))
if resp.code == "200"
  issue(domains, ports)
  if CREATE_PKCS
    build_pkcs(domains)
  end
else
  print "#{resp.code}, #{resp.body}\n"
end
